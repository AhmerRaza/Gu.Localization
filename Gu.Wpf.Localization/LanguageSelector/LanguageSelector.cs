namespace Gu.Wpf.Localization
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Diagnostics;
    using System.Globalization;
    using System.Linq;
    using System.Resources;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Markup;
    using System.Windows.Threading;

    using Gu.Localization;

    /// <summary>
    /// Control for selecting language
    /// </summary>
    [ContentProperty("Languages")]
    public class LanguageSelector : Control
    {
#pragma warning disable SA1202 // Elements must be ordered by access
        /// <summary> Identifies the AutogenerateLanguages property. Default false.</summary>
        public static readonly DependencyProperty AutogenerateLanguagesProperty = DependencyProperty.Register(
            "AutogenerateLanguages",
            typeof(bool),
            typeof(LanguageSelector),
            new PropertyMetadata(
                default(bool),
                OnAutogenerateLanguagesChanged));

        private static readonly DependencyPropertyKey LanguagesPropertyKey = DependencyProperty.RegisterReadOnly(
            nameof(Languages),
            typeof(ObservableCollection<Language>),
            typeof(LanguageSelector),
            new PropertyMetadata(default(ObservableCollection<Language>)));

                              /// <summary>Identifies the <see cref="Languages"/> dependency property.</summary>
        public static readonly DependencyProperty LanguagesProperty = LanguagesPropertyKey.DependencyProperty;
#pragma warning restore SA1202 // Elements must be ordered by access

        private static readonly IReadOnlyDictionary<CultureInfo, string> FlagNameResourceMap;

        static LanguageSelector()
        {
            DefaultStyleKeyProperty.OverrideMetadata(typeof(LanguageSelector), new FrameworkPropertyMetadata(typeof(LanguageSelector)));
            var assembly = typeof(LanguageSelector).Assembly;
            var names = assembly.GetManifestResourceNames();
            var match = names.Single(x => x.EndsWith(".g.resources"));
            Debug.Assert(match != null, "match != null");

            // ReSharper disable once AssignNullToNotNullAttribute
            using (var reader = new ResourceReader(assembly.GetManifestResourceStream(match)))
            {
                var flags = new Dictionary<CultureInfo, string>(CultureInfoComparer.ByName);
                var enumerator = reader.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    var flagName = (string)enumerator.Key;
                    Debug.Assert(flagName != null, "flag == null");
                    var name = System.IO.Path.GetFileNameWithoutExtension(flagName);
                    if (Culture.TryGet(name, out var culture))
                    {
                        flags.Add(culture, flagName);
                    }
                }

                FlagNameResourceMap = flags;
            }
        }

        /// <summary>Initializes a new instance of the <see cref="LanguageSelector"/> class.</summary>
        public LanguageSelector()
        {
            this.Languages = new ObservableCollection<Language>();
        }

        /// <summary>
        /// Gets or sets a value indicating whether languages should be autogenerated. If true <see cref="Languages"/> are kept in sync with <see cref="Translator.Cultures"/>
        /// Default flags are picked from ./Flags/.. if a match is found
        /// </summary>
        public bool AutogenerateLanguages
        {
            get => (bool)this.GetValue(AutogenerateLanguagesProperty);
            set => this.SetValue(AutogenerateLanguagesProperty, value);
        }

        /// <summary>
        /// Gets or sets the languages.
        /// </summary>
        public ObservableCollection<Language> Languages
        {
            get => (ObservableCollection<Language>)this.GetValue(LanguagesProperty);
            protected set => this.SetValue(LanguagesPropertyKey, value);
        }

        private static void OnAutogenerateLanguagesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var languageSelector = (LanguageSelector)d;
            languageSelector.Dispatcher.BeginInvoke(DispatcherPriority.Loaded, new Action(languageSelector.SyncLanguages));
        }

        private void SyncLanguages()
        {
            if (this.AutogenerateLanguages)
            {
                for (var i = this.Languages.Count - 1; i >= 0; i--)
                {
                    if (!Translator.ContainsCulture(this.Languages[i].Culture))
                    {
                        this.Languages.RemoveAt(i);
                    }
                }

                foreach (var cultureInfo in Translator.Cultures)
                {
                    if (this.Languages.Any(x => Culture.NameEquals(x.Culture, cultureInfo)))
                    {
                        continue;
                    }

                    var language = new Language(cultureInfo);
                    if (FlagNameResourceMap.TryGetValue(cultureInfo, out var flag))
                    {
                        var key = new Uri($"pack://application:,,,/{this.GetType().Assembly.GetName().Name};component/{flag}", UriKind.Absolute);
                        language.FlagSource = key;
                    }

                    this.Languages.Add(language);
                }
            }
        }
    }
}
